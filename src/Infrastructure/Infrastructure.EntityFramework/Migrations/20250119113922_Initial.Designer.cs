// <auto-generated />
using System;
using Infrastructure.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.EntityFramework.Migrations
{
    [DbContext(typeof(CarMarketContext))]
    [Migration("20250119113922_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Car", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ModelId")
                        .HasColumnType("integer");

                    b.Property<string>("Vin")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.HasKey("Id");

                    b.HasIndex("ModelId");

                    b.ToTable("Car");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ModelId = 1,
                            Vin = "VIN1234567890TOYOTA"
                        },
                        new
                        {
                            Id = 2,
                            ModelId = 2,
                            Vin = "VIN1234567890FORD"
                        },
                        new
                        {
                            Id = 3,
                            ModelId = 3,
                            Vin = "VIN1234567890BMW"
                        },
                        new
                        {
                            Id = 4,
                            ModelId = 4,
                            Vin = "VIN1234567890HONDA"
                        },
                        new
                        {
                            Id = 5,
                            ModelId = 5,
                            Vin = "VIN1234567890CHEVY"
                        });
                });

            modelBuilder.Entity("Domain.Entities.CarBrand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.HasKey("Id");

                    b.ToTable("CarBrand");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Toyota"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Ford"
                        },
                        new
                        {
                            Id = 3,
                            Name = "BMW"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Honda"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Chevrolet"
                        });
                });

            modelBuilder.Entity("Domain.Entities.CarModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BrandId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.ToTable("CarModel");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BrandId = 1,
                            Name = "Corolla"
                        },
                        new
                        {
                            Id = 2,
                            BrandId = 2,
                            Name = "Focus"
                        },
                        new
                        {
                            Id = 3,
                            BrandId = 3,
                            Name = "X5"
                        },
                        new
                        {
                            Id = 4,
                            BrandId = 1,
                            Name = "Camry"
                        },
                        new
                        {
                            Id = 5,
                            BrandId = 4,
                            Name = "Civic"
                        },
                        new
                        {
                            Id = 6,
                            BrandId = 5,
                            Name = "Malibu"
                        });
                });

            modelBuilder.Entity("Domain.Entities.CarPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CarId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("EndDateUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("StartDateUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.ToTable("CarPrice");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CarId = 1,
                            EndDateUtc = new DateTime(2024, 2, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Price = 25000m,
                            StartDateUtc = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 2,
                            CarId = 1,
                            EndDateUtc = new DateTime(2024, 5, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Price = 10000m,
                            StartDateUtc = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 3,
                            CarId = 2,
                            EndDateUtc = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Price = 18000m,
                            StartDateUtc = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 4,
                            CarId = 3,
                            Price = 55000m,
                            StartDateUtc = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 5,
                            CarId = 4,
                            Price = 25000m,
                            StartDateUtc = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 6,
                            CarId = 5,
                            Price = 25000m,
                            StartDateUtc = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("Domain.Entities.CarReservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CarId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("EndDateUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ReservedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("StartDateUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.ToTable("CarReservation");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CarId = 1,
                            EndDateUtc = new DateTime(2024, 1, 20, 0, 0, 0, 0, DateTimeKind.Utc),
                            ReservedAtUtc = new DateTime(2024, 1, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            StartDateUtc = new DateTime(2024, 1, 10, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("Domain.Entities.Car", b =>
                {
                    b.HasOne("Domain.Entities.CarModel", "Model")
                        .WithMany("Cars")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Model");
                });

            modelBuilder.Entity("Domain.Entities.CarModel", b =>
                {
                    b.HasOne("Domain.Entities.CarBrand", "CarBrand")
                        .WithMany("CarModels")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CarBrand");
                });

            modelBuilder.Entity("Domain.Entities.CarPrice", b =>
                {
                    b.HasOne("Domain.Entities.Car", "Car")
                        .WithMany("CarPrices")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");
                });

            modelBuilder.Entity("Domain.Entities.CarReservation", b =>
                {
                    b.HasOne("Domain.Entities.Car", "Car")
                        .WithMany("Reservations")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");
                });

            modelBuilder.Entity("Domain.Entities.Car", b =>
                {
                    b.Navigation("CarPrices");

                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("Domain.Entities.CarBrand", b =>
                {
                    b.Navigation("CarModels");
                });

            modelBuilder.Entity("Domain.Entities.CarModel", b =>
                {
                    b.Navigation("Cars");
                });
#pragma warning restore 612, 618
        }
    }
}
